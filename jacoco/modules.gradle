apply plugin: 'jacoco'

jacoco {
    toolVersion '0.8.8'
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

project.afterEvaluate {

    (android.hasProperty('applicationVariants') ? android.'applicationVariants' : android.'libraryVariants').all { variant ->
        def variantName = variant.name
        tasks.create(name: "${variantName.capitalize()}Coverage", type: JacocoReport, dependsOn: testDebugUnitTest) {

            group = "Reporting"
            description = "Generate Jacoco coverage reports for the debug build."
            println("Generating Jacoco coverage reports for the ${variantName} build.")

            reports {
                html.enabled = true
                xml.enabled = true
                html.outputLocation.set(layout.buildDirectory.dir("jacocoHtml"))
            }

            def excludes = [
                    '**/R.class',
                    '**/R$*.class',
                    '**/BuildConfig.*',
                    '**/Manifest*.*',
                    '**/*Test*.*',
                    'android/**/*.*',
                    'androidx/**/*.*',
                    '**/*$ViewInjector*.*',
                    '**/*Dagger*.*',
                    '**/*MembersInjector*.*',
                    '**/*_Factory.*',
                    '**/*_Provide*Factory*.*',
                    '**/*_ViewBinding*.*',
                    '**/AutoValue_*.*',
                    '**/R2.class',
                    '**/R2$*.class',
                    '**/*Directions$*',
                    '**/*Directions.*',
                    '**/*Binding.*'
            ]

            def jClasses = "${project.buildDir}/intermediates/javac/debug/classes"
            def kClasses = "${project.buildDir}/tmp/kotlin-classes/debug"
            def javaClasses = fileTree(dir: jClasses, excludes: excludes)

            def kotlinClasses = fileTree(dir: kClasses, excludes: excludes)

            classDirectories.from = files([javaClasses, kotlinClasses])
            def sourceDirs = ["${project.projectDir}/src/main/java", "${project.projectDir}/src/main/kotlin",
                              "${project.projectDir}/src/debug/java", "${project.projectDir}/src/debug/kotlin"]

            println('Execution data from:: ' + files(sourceDirs))

            sourceDirectories.from = files(sourceDirs)

            executionData.from = files(["${project.buildDir}/jacoco/testDebugUnitTest.exec"])
        }
    }
}
